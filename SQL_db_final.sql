-- MySQL Script generated by MySQL Workbench
-- Tue Mar 20 14:54:56 2018
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema SmartGreenhouse
-- -----------------------------------------------------
DROP SCHEMA IF EXISTS `SmartGreenhouse` ;

-- -----------------------------------------------------
-- Schema SmartGreenhouse
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `SmartGreenhouse` DEFAULT CHARACTER SET utf8 ;
USE `SmartGreenhouse` ;

-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`Farmer`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`Farmer` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`Farmer` (
  `FarmerID` INT NOT NULL AUTO_INCREMENT,
  `FarmerEmail` VARCHAR(20) NOT NULL,
  `FarmerName` VARCHAR(45) NOT NULL,
  `FarmerPassword` VARCHAR(60) NOT NULL,
  PRIMARY KEY (`FarmerID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`Farm`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`Farm` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`Farm` (
  `FarmName` VARCHAR(20) NOT NULL,
  `FarmID` INT NOT NULL AUTO_INCREMENT,
  `Farmer_FarmerID` INT NOT NULL,
  PRIMARY KEY (`FarmID`, `Farmer_FarmerID`),
  INDEX `fk_Farm_Farmer_idx` (`Farmer_FarmerID` ASC),
  CONSTRAINT `fk_Farm_Farmer`
    FOREIGN KEY (`Farmer_FarmerID`)
    REFERENCES `SmartGreenhouse`.`Farmer` (`FarmerID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`FarmRegion`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`FarmRegion` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`FarmRegion` (
  `RegionID` INT NOT NULL AUTO_INCREMENT,
  `FarmRegionName` VARCHAR(15) NOT NULL,
  `RegionDescription` VARCHAR(45) NULL,
  `Farm_FarmID` INT NOT NULL,
  PRIMARY KEY (`RegionID`, `Farm_FarmID`),
  INDEX `fk_FarmRegion_Farm1_idx` (`Farm_FarmID` ASC),
  CONSTRAINT `fk_FarmRegion_Farm1`
    FOREIGN KEY (`Farm_FarmID`)
    REFERENCES `SmartGreenhouse`.`Farm` (`FarmID`)
    ON DELETE RESTRICT
    ON UPDATE RESTRICT)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`SensorTypes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`SensorTypes` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`SensorTypes` (
  `SensorTypeID` INT NOT NULL AUTO_INCREMENT,
  `SensorName` VARCHAR(45) NOT NULL,
  `SensorUnit` VARCHAR(5) NULL,
  PRIMARY KEY (`SensorTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`InstalledSensors`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`InstalledSensors` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`InstalledSensors` (
  `SensorID` INT NOT NULL AUTO_INCREMENT,
  `FarmRegion_RegionID` INT NOT NULL,
  `SensorTypes_SensorTypeID` INT NOT NULL,
  `SensorNickname` VARCHAR(20) NULL,
  `Internal` TINYINT(1) NOT NULL DEFAULT 1,
  `SensorInputPin` INT NULL,
  `SensorPowerPin` INT NULL,
  PRIMARY KEY (`SensorID`, `FarmRegion_RegionID`, `SensorTypes_SensorTypeID`),
  INDEX `fk_InstalledSensors_SensorTypes1_idx` (`SensorTypes_SensorTypeID` ASC),
  INDEX `fk_Sensor_FarmRegion_idx` (`FarmRegion_RegionID` ASC),
  CONSTRAINT `fk_Sensor_FarmRegion`
    FOREIGN KEY (`FarmRegion_RegionID`)
    REFERENCES `SmartGreenhouse`.`FarmRegion` (`RegionID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InstalledSensors_SensorTypes1`
    FOREIGN KEY (`SensorTypes_SensorTypeID`)
    REFERENCES `SmartGreenhouse`.`SensorTypes` (`SensorTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`CorrectionTypes`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`CorrectionTypes` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`CorrectionTypes` (
  `CorrectionTypeID` INT NOT NULL AUTO_INCREMENT,
  `CorrectionName` VARCHAR(20) NOT NULL,
  `CorrectionDescription` VARCHAR(45) NULL,
  PRIMARY KEY (`CorrectionTypeID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`InstalledCorrectors`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`InstalledCorrectors` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`InstalledCorrectors` (
  `CorrectorID` INT NOT NULL AUTO_INCREMENT,
  `CorrectionTypes_CorrectionTypeID` INT NOT NULL,
  `FarmRegion_RegionID` INT NOT NULL,
  `CorrectorPin` INT NULL,
  PRIMARY KEY (`CorrectorID`, `CorrectionTypes_CorrectionTypeID`, `FarmRegion_RegionID`),
  INDEX `fk_InstalledCorrectors_CorrectionTypes1_idx` (`CorrectionTypes_CorrectionTypeID` ASC),
  INDEX `fk_InstalledCorrectors_FarmRegion1_idx` (`FarmRegion_RegionID` ASC),
  CONSTRAINT `fk_InstalledCorrectors_CorrectionTypes1`
    FOREIGN KEY (`CorrectionTypes_CorrectionTypeID`)
    REFERENCES `SmartGreenhouse`.`CorrectionTypes` (`CorrectionTypeID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InstalledCorrectors_FarmRegion1`
    FOREIGN KEY (`FarmRegion_RegionID`)
    REFERENCES `SmartGreenhouse`.`FarmRegion` (`RegionID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`SensorReadings`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`SensorReadings` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`SensorReadings` (
  `TimeStamp` DATETIME NOT NULL,
  `SensorValue` FLOAT NULL,
  `InstalledSensors_SensorID` INT NOT NULL,
  `Error` TINYINT(1) NOT NULL DEFAULT 0,
  PRIMARY KEY (`TimeStamp`, `InstalledSensors_SensorID`),
  INDEX `fk_SensorReadings_InstalledSensors1_idx` (`InstalledSensors_SensorID` ASC),
  CONSTRAINT `fk_SensorReadings_InstalledSensors1`
    FOREIGN KEY (`InstalledSensors_SensorID`)
    REFERENCES `SmartGreenhouse`.`InstalledSensors` (`SensorID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`CorrectionAction`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`CorrectionAction` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`CorrectionAction` (
  `TimeStampStart` DATETIME NOT NULL,
  `InstalledCorrectors_CorrectorID` INT NOT NULL,
  `TimeStampEnd` DATETIME NULL,
  PRIMARY KEY (`InstalledCorrectors_CorrectorID`, `TimeStampStart`),
  INDEX `fk_SensorReadings_copy1_InstalledCorrectors1_idx` (`InstalledCorrectors_CorrectorID` ASC),
  CONSTRAINT `fk_SensorReadings_copy1_InstalledCorrectors1`
    FOREIGN KEY (`InstalledCorrectors_CorrectorID`)
    REFERENCES `SmartGreenhouse`.`InstalledCorrectors` (`CorrectorID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`PHCorrection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`PHCorrection` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`PHCorrection` (
  `PHEqualiserVolume` FLOAT NOT NULL,
  `CorrectionAction_InstalledCorrectors_CorrectorID` INT NOT NULL,
  `CorrectionAction_TimeStampStart` DATETIME NOT NULL,
  PRIMARY KEY (`CorrectionAction_InstalledCorrectors_CorrectorID`, `CorrectionAction_TimeStampStart`),
  CONSTRAINT `fk_PHCorrection_CorrectionAction1`
    FOREIGN KEY (`CorrectionAction_InstalledCorrectors_CorrectorID` , `CorrectionAction_TimeStampStart`)
    REFERENCES `SmartGreenhouse`.`CorrectionAction` (`InstalledCorrectors_CorrectorID` , `TimeStampStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`LEDCorrection`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`LEDCorrection` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`LEDCorrection` (
  `RedValue` FLOAT NOT NULL,
  `GreenValue` FLOAT NOT NULL,
  `BlueValue` FLOAT NOT NULL,
  `Intensity` FLOAT NOT NULL,
  `CorrectionAction_InstalledCorrectors_CorrectorID` INT NOT NULL,
  `CorrectionAction_TimeStampStart` DATETIME NOT NULL,
  PRIMARY KEY (`CorrectionAction_InstalledCorrectors_CorrectorID`, `CorrectionAction_TimeStampStart`),
  CONSTRAINT `fk_LEDCorrection_CorrectionAction1`
    FOREIGN KEY (`CorrectionAction_InstalledCorrectors_CorrectorID` , `CorrectionAction_TimeStampStart`)
    REFERENCES `SmartGreenhouse`.`CorrectionAction` (`InstalledCorrectors_CorrectorID` , `TimeStampStart`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`CorrectionModule`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`CorrectionModule` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`CorrectionModule` (
  `ModuleID` INT NOT NULL AUTO_INCREMENT,
  `FarmRegion_RegionID` INT NOT NULL,
  `ModuleCode` INT NULL,
  `ModuleName` VARCHAR(20) NULL,
  PRIMARY KEY (`ModuleID`, `FarmRegion_RegionID`),
  CONSTRAINT `fk_CorrectionModule_FarmRegion1`
    FOREIGN KEY (`FarmRegion_RegionID`)
    REFERENCES `SmartGreenhouse`.`FarmRegion` (`RegionID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`DesiredConditions`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`DesiredConditions` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`DesiredConditions` (
  `ConditionStartTime` DATETIME NOT NULL,
  `CorrectionModule_ModuleID` INT NOT NULL,
  `UpplerLimit` FLOAT NOT NULL,
  `LowerLimit` FLOAT NULL,
  `ConditionEndTime` DATETIME NULL,
  PRIMARY KEY (`ConditionStartTime`, `CorrectionModule_ModuleID`),
  INDEX `fk_DesiredConditions_CorrectionModule1_idx` (`CorrectionModule_ModuleID` ASC),
  CONSTRAINT `fk_DesiredConditions_CorrectionModule1`
    FOREIGN KEY (`CorrectionModule_ModuleID`)
    REFERENCES `SmartGreenhouse`.`CorrectionModule` (`ModuleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`DesiredLightType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`DesiredLightType` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`DesiredLightType` (
  `DesiredRed` FLOAT NOT NULL,
  `DesiredGreen` FLOAT NOT NULL,
  `DesiredBlue` FLOAT NOT NULL,
  `DesiredConditions_ConditionStartTime` DATETIME NOT NULL,
  `DesiredConditions_CorrectionModule_ModuleID` INT NOT NULL,
  PRIMARY KEY (`DesiredConditions_ConditionStartTime`, `DesiredConditions_CorrectionModule_ModuleID`),
  CONSTRAINT `fk_DesiredLightType_DesiredConditions1`
    FOREIGN KEY (`DesiredConditions_ConditionStartTime` , `DesiredConditions_CorrectionModule_ModuleID`)
    REFERENCES `SmartGreenhouse`.`DesiredConditions` (`ConditionStartTime` , `CorrectionModule_ModuleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`CropType`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`CropType` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`CropType` (
  `CropID` INT NOT NULL AUTO_INCREMENT,
  `CropName` VARCHAR(10) NOT NULL,
  `CropDescription` VARCHAR(45) NULL,
  PRIMARY KEY (`CropID`))
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`CropInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`CropInfo` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`CropInfo` (
  `CropPlantDate` DATETIME NOT NULL,
  `CropHarvestDate` DATETIME NULL,
  `CropType_CropID` INT NOT NULL,
  `HarvestYield` FLOAT NULL,
  PRIMARY KEY (`CropType_CropID`, `CropPlantDate`),
  INDEX `fk_CropInfo_PlantType1_idx` (`CropType_CropID` ASC),
  CONSTRAINT `fk_CropInfo_PlantType1`
    FOREIGN KEY (`CropType_CropID`)
    REFERENCES `SmartGreenhouse`.`CropType` (`CropID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`FarmRegion_has_CropInfo`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`FarmRegion_has_CropInfo` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`FarmRegion_has_CropInfo` (
  `FarmRegion_RegionID` INT NOT NULL,
  `FarmRegion_Farm_FarmID` INT NOT NULL,
  `CropInfo_CropType_CropID` INT NOT NULL,
  `CropInfo_CropPlantDate` DATETIME NOT NULL,
  PRIMARY KEY (`FarmRegion_RegionID`, `FarmRegion_Farm_FarmID`, `CropInfo_CropType_CropID`, `CropInfo_CropPlantDate`),
  INDEX `fk_FarmRegion_has_CropInfo_CropInfo1_idx` (`CropInfo_CropType_CropID` ASC, `CropInfo_CropPlantDate` ASC),
  INDEX `fk_FarmRegion_has_CropInfo_FarmRegion1_idx` (`FarmRegion_RegionID` ASC, `FarmRegion_Farm_FarmID` ASC),
  CONSTRAINT `fk_FarmRegion_has_CropInfo_FarmRegion1`
    FOREIGN KEY (`FarmRegion_RegionID` , `FarmRegion_Farm_FarmID`)
    REFERENCES `SmartGreenhouse`.`FarmRegion` (`RegionID` , `Farm_FarmID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_FarmRegion_has_CropInfo_CropInfo1`
    FOREIGN KEY (`CropInfo_CropType_CropID` , `CropInfo_CropPlantDate`)
    REFERENCES `SmartGreenhouse`.`CropInfo` (`CropType_CropID` , `CropPlantDate`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`LEDCorrector`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`LEDCorrector` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`LEDCorrector` (
  `RedPin` INT NOT NULL,
  `GreenPin` INT NOT NULL,
  `BluePin` INT NOT NULL,
  `InstalledCorrectors_CorrectorID` INT NOT NULL,
  PRIMARY KEY (`InstalledCorrectors_CorrectorID`),
  CONSTRAINT `fk_LEDCorrector_InstalledCorrectors1`
    FOREIGN KEY (`InstalledCorrectors_CorrectorID`)
    REFERENCES `SmartGreenhouse`.`InstalledCorrectors` (`CorrectorID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`PowerRelay`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`PowerRelay` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`PowerRelay` (
  `InstalledSensors_SensorID` INT NOT NULL,
  `RelayPin` INT NOT NULL,
  PRIMARY KEY (`InstalledSensors_SensorID`),
  CONSTRAINT `fk_Relay_InstalledSensors1`
    FOREIGN KEY (`InstalledSensors_SensorID`)
    REFERENCES `SmartGreenhouse`.`InstalledSensors` (`SensorID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`I2cBusSensor`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`I2cBusSensor` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`I2cBusSensor` (
  `InstalledSensors_SensorID` INT NOT NULL,
  `SensorAddress` INT NOT NULL,
  `AddrFloatOrGround` TINYINT(1) NOT NULL,
  PRIMARY KEY (`InstalledSensors_SensorID`),
  CONSTRAINT `fk_Relay_InstalledSensors10`
    FOREIGN KEY (`InstalledSensors_SensorID`)
    REFERENCES `SmartGreenhouse`.`InstalledSensors` (`SensorID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`InstalledCorrectors_has_CorrectionModule`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`InstalledCorrectors_has_CorrectionModule` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`InstalledCorrectors_has_CorrectionModule` (
  `InstalledCorrectors_CorrectorID` INT NOT NULL,
  `CorrectionModule_ModuleID` INT NOT NULL,
  PRIMARY KEY (`InstalledCorrectors_CorrectorID`, `CorrectionModule_ModuleID`),
  INDEX `fk_InstalledCorrectors_has_CorrectionModule_CorrectionModul_idx` (`CorrectionModule_ModuleID` ASC),
  INDEX `fk_InstalledCorrectors_has_CorrectionModule_InstalledCorrec_idx` (`InstalledCorrectors_CorrectorID` ASC),
  CONSTRAINT `fk_InstalledCorrectors_has_CorrectionModule_InstalledCorrecto1`
    FOREIGN KEY (`InstalledCorrectors_CorrectorID`)
    REFERENCES `SmartGreenhouse`.`InstalledCorrectors` (`CorrectorID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_InstalledCorrectors_has_CorrectionModule_CorrectionModule1`
    FOREIGN KEY (`CorrectionModule_ModuleID`)
    REFERENCES `SmartGreenhouse`.`CorrectionModule` (`ModuleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


-- -----------------------------------------------------
-- Table `SmartGreenhouse`.`CorrectionModule_has_InstalledSensors`
-- -----------------------------------------------------
DROP TABLE IF EXISTS `SmartGreenhouse`.`CorrectionModule_has_InstalledSensors` ;

CREATE TABLE IF NOT EXISTS `SmartGreenhouse`.`CorrectionModule_has_InstalledSensors` (
  `CorrectionModule_ModuleID` INT NOT NULL,
  `InstalledSensors_SensorID` INT NOT NULL,
  PRIMARY KEY (`CorrectionModule_ModuleID`, `InstalledSensors_SensorID`),
  INDEX `fk_CorrectionModule_has_InstalledSensors_InstalledSensors1_idx` (`InstalledSensors_SensorID` ASC),
  INDEX `fk_CorrectionModule_has_InstalledSensors_CorrectionModule1_idx` (`CorrectionModule_ModuleID` ASC),
  CONSTRAINT `fk_CorrectionModule_has_InstalledSensors_CorrectionModule1`
    FOREIGN KEY (`CorrectionModule_ModuleID`)
    REFERENCES `SmartGreenhouse`.`CorrectionModule` (`ModuleID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION,
  CONSTRAINT `fk_CorrectionModule_has_InstalledSensors_InstalledSensors1`
    FOREIGN KEY (`InstalledSensors_SensorID`)
    REFERENCES `SmartGreenhouse`.`InstalledSensors` (`SensorID`)
    ON DELETE NO ACTION
    ON UPDATE NO ACTION)
ENGINE = InnoDB;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;

-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`Farmer`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`Farmer` (`FarmerID`, `FarmerEmail`, `FarmerName`, `FarmerPassword`) VALUES (1, 'joe.laith@live.com', 'Joseph Laithwaite', '$2y$10$PRMiDk8Wx8XoEAT2E7R76uoIrZe4vQZMrCxPTaCoqL3ulkZXbWwKO');

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`Farm`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`Farm` (`FarmName`, `FarmID`, `Farmer_FarmerID`) VALUES ('My Farm', 1, 1);
INSERT INTO `SmartGreenhouse`.`Farm` (`FarmName`, `FarmID`, `Farmer_FarmerID`) VALUES ('My big ol\' farm', 2, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`FarmRegion`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`FarmRegion` (`RegionID`, `FarmRegionName`, `RegionDescription`, `Farm_FarmID`) VALUES (1, 'My first region', 'Prototype greenhouse', 1);
INSERT INTO `SmartGreenhouse`.`FarmRegion` (`RegionID`, `FarmRegionName`, `RegionDescription`, `Farm_FarmID`) VALUES (2, 'My Second Region', 'Desctiption of my Second Region', 1);
INSERT INTO `SmartGreenhouse`.`FarmRegion` (`RegionID`, `FarmRegionName`, `RegionDescription`, `Farm_FarmID`) VALUES (3, 'Lettuce 1', NULL, 2);

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`SensorTypes`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`SensorTypes` (`SensorTypeID`, `SensorName`, `SensorUnit`) VALUES (4, 'Air Temperature Sensor', 'oC');
INSERT INTO `SmartGreenhouse`.`SensorTypes` (`SensorTypeID`, `SensorName`, `SensorUnit`) VALUES (5, 'Humidity', '%');
INSERT INTO `SmartGreenhouse`.`SensorTypes` (`SensorTypeID`, `SensorName`, `SensorUnit`) VALUES (3, 'Luminosity', 'Lux');
INSERT INTO `SmartGreenhouse`.`SensorTypes` (`SensorTypeID`, `SensorName`, `SensorUnit`) VALUES (1, 'PH', 'ph');
INSERT INTO `SmartGreenhouse`.`SensorTypes` (`SensorTypeID`, `SensorName`, `SensorUnit`) VALUES (2, 'Water Volume', 'ml');

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`InstalledSensors`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`InstalledSensors` (`SensorID`, `FarmRegion_RegionID`, `SensorTypes_SensorTypeID`, `SensorNickname`, `Internal`, `SensorInputPin`, `SensorPowerPin`) VALUES (1, 1, 4, 'Internal temperature', 1, 23, NULL);
INSERT INTO `SmartGreenhouse`.`InstalledSensors` (`SensorID`, `FarmRegion_RegionID`, `SensorTypes_SensorTypeID`, `SensorNickname`, `Internal`, `SensorInputPin`, `SensorPowerPin`) VALUES (2, 1, 3, 'Internal light level', 1, NULL, NULL);
INSERT INTO `SmartGreenhouse`.`InstalledSensors` (`SensorID`, `FarmRegion_RegionID`, `SensorTypes_SensorTypeID`, `SensorNickname`, `Internal`, `SensorInputPin`, `SensorPowerPin`) VALUES (3, 1, 3, 'External light level', 0, NULL, NULL);
INSERT INTO `SmartGreenhouse`.`InstalledSensors` (`SensorID`, `FarmRegion_RegionID`, `SensorTypes_SensorTypeID`, `SensorNickname`, `Internal`, `SensorInputPin`, `SensorPowerPin`) VALUES (4, 1, 1, 'Reservoir ph', 1, 26, 22);
INSERT INTO `SmartGreenhouse`.`InstalledSensors` (`SensorID`, `FarmRegion_RegionID`, `SensorTypes_SensorTypeID`, `SensorNickname`, `Internal`, `SensorInputPin`, `SensorPowerPin`) VALUES (5, 1, 2, 'Reservoir volume', 1, 25, 22);

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`CorrectionTypes`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`CorrectionTypes` (`CorrectionTypeID`, `CorrectionName`, `CorrectionDescription`) VALUES (1, 'PH Equaliser', 'Adds acidic equaliser to lower the water PH');
INSERT INTO `SmartGreenhouse`.`CorrectionTypes` (`CorrectionTypeID`, `CorrectionName`, `CorrectionDescription`) VALUES (2, 'Water Pump', 'Pumps water from reservoir roots');
INSERT INTO `SmartGreenhouse`.`CorrectionTypes` (`CorrectionTypeID`, `CorrectionName`, `CorrectionDescription`) VALUES (3, 'LED Light Strip', 'Lights at a given brightness and colour');
INSERT INTO `SmartGreenhouse`.`CorrectionTypes` (`CorrectionTypeID`, `CorrectionName`, `CorrectionDescription`) VALUES (4, 'Fan', 'Move air from outside into the greenhouse');
INSERT INTO `SmartGreenhouse`.`CorrectionTypes` (`CorrectionTypeID`, `CorrectionName`, `CorrectionDescription`) VALUES (5, 'Water Mixer', 'Moves the water to mix in ph equaliser');

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`InstalledCorrectors`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`InstalledCorrectors` (`CorrectorID`, `CorrectionTypes_CorrectionTypeID`, `FarmRegion_RegionID`, `CorrectorPin`) VALUES (1, 1, 1, 2);
INSERT INTO `SmartGreenhouse`.`InstalledCorrectors` (`CorrectorID`, `CorrectionTypes_CorrectionTypeID`, `FarmRegion_RegionID`, `CorrectorPin`) VALUES (2, 2, 1, 1);
INSERT INTO `SmartGreenhouse`.`InstalledCorrectors` (`CorrectorID`, `CorrectionTypes_CorrectionTypeID`, `FarmRegion_RegionID`, `CorrectorPin`) VALUES (3, 3, 1, NULL);
INSERT INTO `SmartGreenhouse`.`InstalledCorrectors` (`CorrectorID`, `CorrectionTypes_CorrectionTypeID`, `FarmRegion_RegionID`, `CorrectorPin`) VALUES (4, 4, 1, 10);
INSERT INTO `SmartGreenhouse`.`InstalledCorrectors` (`CorrectorID`, `CorrectionTypes_CorrectionTypeID`, `FarmRegion_RegionID`, `CorrectorPin`) VALUES (5, 5, 1, 9);

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`SensorReadings`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`SensorReadings` (`TimeStamp`, `SensorValue`, `InstalledSensors_SensorID`, `Error`) VALUES ('2018-13-02 08:52:22', 20.5, 1, DEFAULT);

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`CorrectionModule`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`CorrectionModule` (`ModuleID`, `FarmRegion_RegionID`, `ModuleCode`, `ModuleName`) VALUES (1, 1, 1, 'PH Module');
INSERT INTO `SmartGreenhouse`.`CorrectionModule` (`ModuleID`, `FarmRegion_RegionID`, `ModuleCode`, `ModuleName`) VALUES (2, 1, 2, 'Water sensor module');
INSERT INTO `SmartGreenhouse`.`CorrectionModule` (`ModuleID`, `FarmRegion_RegionID`, `ModuleCode`, `ModuleName`) VALUES (3, 1, 4, 'Light Module');

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`DesiredConditions`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`DesiredConditions` (`ConditionStartTime`, `CorrectionModule_ModuleID`, `UpplerLimit`, `LowerLimit`, `ConditionEndTime`) VALUES ('17-03-05 12:00:00', DEFAULT, DEFAULT, NULL, NULL);

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`LEDCorrector`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`LEDCorrector` (`RedPin`, `GreenPin`, `BluePin`, `InstalledCorrectors_CorrectorID`) VALUES (13, 14, 15, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`PowerRelay`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`PowerRelay` (`InstalledSensors_SensorID`, `RelayPin`) VALUES (5, 19);

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`I2cBusSensor`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`I2cBusSensor` (`InstalledSensors_SensorID`, `SensorAddress`, `AddrFloatOrGround`) VALUES (2, 25638, 0);
INSERT INTO `SmartGreenhouse`.`I2cBusSensor` (`InstalledSensors_SensorID`, `SensorAddress`, `AddrFloatOrGround`) VALUES (3, 25639, 1);

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`InstalledCorrectors_has_CorrectionModule`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`InstalledCorrectors_has_CorrectionModule` (`InstalledCorrectors_CorrectorID`, `CorrectionModule_ModuleID`) VALUES (1, 1);
INSERT INTO `SmartGreenhouse`.`InstalledCorrectors_has_CorrectionModule` (`InstalledCorrectors_CorrectorID`, `CorrectionModule_ModuleID`) VALUES (5, 1);
INSERT INTO `SmartGreenhouse`.`InstalledCorrectors_has_CorrectionModule` (`InstalledCorrectors_CorrectorID`, `CorrectionModule_ModuleID`) VALUES (2, 2);
INSERT INTO `SmartGreenhouse`.`InstalledCorrectors_has_CorrectionModule` (`InstalledCorrectors_CorrectorID`, `CorrectionModule_ModuleID`) VALUES (3, 3);

COMMIT;


-- -----------------------------------------------------
-- Data for table `SmartGreenhouse`.`CorrectionModule_has_InstalledSensors`
-- -----------------------------------------------------
START TRANSACTION;
USE `SmartGreenhouse`;
INSERT INTO `SmartGreenhouse`.`CorrectionModule_has_InstalledSensors` (`CorrectionModule_ModuleID`, `InstalledSensors_SensorID`) VALUES (1, 4);
INSERT INTO `SmartGreenhouse`.`CorrectionModule_has_InstalledSensors` (`CorrectionModule_ModuleID`, `InstalledSensors_SensorID`) VALUES (1, 5);
INSERT INTO `SmartGreenhouse`.`CorrectionModule_has_InstalledSensors` (`CorrectionModule_ModuleID`, `InstalledSensors_SensorID`) VALUES (2, 5);
INSERT INTO `SmartGreenhouse`.`CorrectionModule_has_InstalledSensors` (`CorrectionModule_ModuleID`, `InstalledSensors_SensorID`) VALUES (3, 2);
INSERT INTO `SmartGreenhouse`.`CorrectionModule_has_InstalledSensors` (`CorrectionModule_ModuleID`, `InstalledSensors_SensorID`) VALUES (3, 3);

COMMIT;

